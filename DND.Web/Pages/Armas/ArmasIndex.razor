@page "/Armas"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<div class="container-fluid">
    <div class="row">
        <div class="col-6 text-end">
            <a href="/armas/create">
                <span class="oi oi-plus" style="color:#EAEAEA"></span>
            </a>
            <h1>
                Armas
            </h1>
        </div>
        <div class="col-2"></div>
        <div class="col-3 text-center">
            <InputText class="form-control mt-2" @oninput="SearchOnChange" @bind-Value=searchText />
        </div>
    </div>
    <div class="row">
        <div class="col-1"></div>
        <div class="col-10">
            <GenericList MyList="Armas">
                <Body>
                    <table class="table table-striped table-hover" style="color: #EAEAEA">
                        <thead>
                            <tr>
                                <th style="cursor:pointer">
                                    <p>Nombre</p>
                                </th>
                                <th style="cursor:pointer">
                                    <p>Categoria</p>
                                </th>
                                <th class="text-center" style="cursor:pointer">
                                    <p>Daño</p>
                                </th>
                                <th class="text-center" style="cursor:pointer">
                                    <p>Tipo de Daño</p>
                                </th>
                                <th class="text-center" style="cursor:pointer">
                                    <p>Critico</p>
                                </th>
                                <th class="text-center" style="cursor:pointer">
                                    <p>Precio PO</p>
                                </th>
                                <th>
                                    <p>Tipo</p>
                                </th>
                                <th><p></p></th>
                            </tr>
                        </thead>
                        <tbody style="color: #EAEAEA">
                            @foreach (var arma in Armas!)
                            {
                                <tr style="color: #EAEAEA; cursor:pointer;">
                                    <td>
                                        <p>@arma.Nombre</p>
                                    </td>
                                    <td>
                                        <p>@arma.Categoria</p>
                                    </td>
                                    <td class="text-center">
                                        <p>@arma.Daño</p>
                                    </td>
                                    <td class="text-center">
                                        <p>@arma.TipoDaño</p>
                                    </td>
                                    <td class="text-center">
                                        <p>@arma.Critico</p>
                                    </td>
                                    <td class="text-center">
                                        <p>@Convert.ToInt32(arma.Precio) PO</p>
                                    </td>
                                    <td>
                                        <a href="/armas/edit/@arma.Id">
                                            <i class="oi oi-pencil" style="color:#EAEAEA"></i>
                                        </a>
                                        <a href="/armas/create">
                                            <i class="oi oi-trash" style="color:#EAEAEA"></i>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
                <Loading></Loading>
            </GenericList>
        </div>
    </div>
</div>


@code {
    public List<Arma>? Armas { get; set; }
    public List<Arma>? armasOrigen { get; set; }
    bool asc = true;
    public string? searchText;
    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<Arma>>("api/Armas");
        Armas = responseHttp.Response!;
        armasOrigen = Armas;
    }
    private void SearchOnChange(ChangeEventArgs e)
    {
        searchText = e.Value!.ToString();
        UpdateArmadurasList();
    }

    private void UpdateArmadurasList() => Armas = armasOrigen!.Where(arma => arma.Nombre.ToLower().Contains(searchText!.ToLower())).ToList();


    private async Task ShowDetail(Arma arma)
    {
        var alertConfig = new SweetAlertOptions
            {
                Title = arma.Nombre,
                Text = $"Categoría:{arma.Categoria}</br> Daño: +{arma.Daño} Tipo de daño: +{arma.TipoDaño} Critico: {arma.Critico}% Precio: {arma.Precio}",
            };

        await sweetAlertService.FireAsync(alertConfig);
    }
    private async Task Delete(int armaId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/Armas/{armaId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }

            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

    }
    private void SortByName()
    {
        if (asc)
        {
            Armas = Armas!.OrderByDescending(arma => arma.Nombre).ToList();
            asc = false;
        }
        else
        {
            Armas = Armas!.OrderBy(arma => arma.Nombre).ToList();
            asc = true;
        }
    }
    private void SortByCategory()
    {
        if (asc)
        {
            Armas = Armas!.OrderByDescending(arma => arma.Categoria).ToList();
            asc = false;
        }
        else
        {
            Armas = Armas!.OrderBy(arma => arma.Categoria).ToList();
            asc = true;
        }
    }
    private void SortByPrice()
    {
        if (asc)
        {
            Armas = Armas!.OrderByDescending(arma => arma.Precio).ToList();
            asc = false;
        }
        else
        {
            Armas = Armas!.OrderBy(arma => arma.Precio).ToList();
            asc = true;
        }
    }
    private void SortByDamage()
    {
        if (asc)
        {
            Armas = Armas!.OrderByDescending(arma => arma.Daño).ToList();
            asc = false;
        }
        else
        {
            Armas = Armas!.OrderBy(arma => arma.Daño).ToList();
            asc = true;
        }
    }
    private void SortByDamageType()
    {
        if (asc)
        {
            Armas = Armas!.OrderByDescending(arma => arma.TipoDaño).ToList();
            asc = false;
        }
        else
        {
            Armas = Armas!.OrderBy(arma => arma.TipoDaño).ToList();
            asc = true;
        }
    }
    private void SortByCritic()
    {
        if (asc)
        {
            Armas = Armas!.OrderByDescending(arma => arma.Critico).ToList();
            asc = false;
        }
        else
        {
            Armas = Armas!.OrderBy(arma => arma.Critico).ToList();
            asc = true;
        }
    }
}



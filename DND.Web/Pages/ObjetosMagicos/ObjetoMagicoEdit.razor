@page "/Objetos-Magicos/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
<div class="container-fluid">
    <div class="row">
        <div class="col-12 text-center">
            <h3>Editar Objeto Mágico</h3>
        </div>
    </div>
</div>

@if (om is null)
{
    <p>Cargando...</p>
}
else
{
    <ObjetoMagicoForm @ref="omForm" ObjetoMagico="om" OnValidSubmit="Edit" ReturnAction="Return" />
}

@code {
    private ObjetoMagico? om;
    private ObjetoMagicoForm? omForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<ObjetoMagico>($"api/ObjetoMagicos/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("ObjetosMagicos");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            om = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.Put($"api/ObjetoMagicos/{om.Id}", om);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            omForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("Objetos-Magicos");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("Objetos-Magicos");
    }
}

